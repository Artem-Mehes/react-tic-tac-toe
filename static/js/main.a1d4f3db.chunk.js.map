{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","chooseFirstPlayer","event","setState","firstPlayer","target","textContent","currentPlayer","isGameStarted","handleClick","state","isGameFinished","data","getAttribute","currentCells","cells","currentSymbol","count","isGameOver","symbol","winLines","forEach","line","every","cell","prevState","winner","winsScore","isDraw","startNewGame","Array","fill","X","O","notification","this","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a1d4f3db.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cells: Array(9).fill(null),\n            count: 0,\n            isGameFinished: false,\n            isGameStarted: false,\n            isDraw: false,\n            winner: null,\n            winsScore: {X: 0, O: 0},\n            firstPlayer: 'X',\n            currentPlayer: 'X'\n        };\n\n        this.winLines = [\n            [0, 1, 2], \n            [3, 4, 5],  \n            [6, 7, 8],  \n            [0, 3, 6],  \n            [1, 4, 7],  \n            [2, 5, 8], \n            [0, 4, 8], \n            [2, 4, 6]  \n        ]\n    }\n\n    chooseFirstPlayer = event => {\n        this.setState({ \n            firstPlayer: event.target.textContent,\n            currentPlayer: event.target.textContent,\n            isGameStarted: true \n        });\n    }\n\n    handleClick = event => {\n        if (this.state.isGameFinished) return;\n\n        const data = event.target.getAttribute('data'),\n              currentCells = this.state.cells,\n              currentSymbol = this.state.currentPlayer;\n    \n        if ( !currentCells[data] ) {\n            currentCells[data] = currentSymbol;\n            this.setState({ \n                cells: currentCells,\n                count: this.state.count + 1,\n                currentPlayer: this.state.currentPlayer === 'X' ? 'O' : 'X',\n                isGameStarted: true\n            }); \n        }\n\n        if (this.state.count > 3) {\n            this.isGameOver(currentSymbol);\n        }\n    }\n\n    isGameOver = symbol => {\n        this.winLines.forEach(line => {\n            if ( line.every(cell => this.state.cells[cell] === symbol) ) {\n                    this.setState(prevState => ({ \n                        isGameFinished: true,\n                        winner: symbol,\n                        winsScore: {\n                            ...prevState.winsScore,\n                            [symbol]: this.state.winsScore[symbol] + 1\n                        }\n                    }));\n                } else if (this.state.count === 9) {\n                    this.setState({\n                        isGameFinished: true,\n                        isDraw: true\n                    });\n                }\n        });\n    }\n\n    startNewGame = () => {\n        this.setState({\n            isGameFinished: false,\n            count: 0,\n            cells: Array(9).fill(null),\n            isDraw: false,\n            winner: null,\n            firstPlayer: 'X',\n            currentPlayer: 'X',\n            isGameStarted: false\n        });\n    }\n\n    render() {\n        let notification;\n        let firstPlayer;\n\n        if (this.state.isDraw) {\n            notification = 'Draw!'\n        } else {\n            notification = <> Player <span className=\"player\">{this.state.winner}</span> Wins! </>;\n        }\n            \n        if (this.state.isGameStarted) {\n            firstPlayer = <> <h2>Player <span className=\"player\">{this.state.firstPlayer}</span> Goes First!</h2> </> \n        } else {\n            firstPlayer = \n                <>\n                <h2>Choose Who Goes First</h2>\n                    <div className=\"choose-buttons\">\n                        <button className=\"btn choose-btn\" onClick={this.chooseFirstPlayer}><span className=\"player\">X</span></button>\n                        <button className=\"btn choose-btn\" onClick={this.chooseFirstPlayer}><span className=\"player\">O</span></button>\n                    </div>\n                </>\n        } \n        \n        return (\n            <>\n                <header className=\"header\">\n                    <h1 className=\"heading\">Tic-Tac-Toe</h1>\n                    {this.state.isGameFinished && \n                    <span className=\"notification\">\n                        {notification}\n                    </span>}\n                </header>\n\n                <main className=\"main\">\n                    <div className=\"choose-first\">\n                        {firstPlayer}\n                    </div>\n\n                    <div className=\"tic-tac-toe\">\n                        <span className=\"cell\" onClick={this.handleClick} data=\"0\">{this.state.cells[0]}</span>\n                        <span className=\"cell\" onClick={this.handleClick} data=\"1\">{this.state.cells[1]}</span>\n                        <span className=\"cell\" onClick={this.handleClick} data=\"2\">{this.state.cells[2]}</span>\n                        <span className=\"cell\" onClick={this.handleClick} data=\"3\">{this.state.cells[3]}</span>\n                        <span className=\"cell\" onClick={this.handleClick} data=\"4\">{this.state.cells[4]}</span>\n                        <span className=\"cell\" onClick={this.handleClick} data=\"5\">{this.state.cells[5]}</span>\n                        <span className=\"cell\" onClick={this.handleClick} data=\"6\">{this.state.cells[6]}</span>\n                        <span className=\"cell\" onClick={this.handleClick} data=\"7\">{this.state.cells[7]}</span>\n                        <span className=\"cell\" onClick={this.handleClick} data=\"8\">{this.state.cells[8]}</span>\n                    </div>\n\n                    <div className=\"score\">\n                        <h2>Score</h2>\n                        <p>Player <span className=\"player\">X</span>: {this.state.winsScore.X}</p>\n                        <p>Player <span className=\"player\">O</span>: {this.state.winsScore.O}</p>\n                    </div>\n                </main>\n                \n                <footer className=\"footer\">\n                    <button className=\"btn newgame-btn\" onClick={this.startNewGame}>Start New Game</button>\n                </footer>\n            </>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}